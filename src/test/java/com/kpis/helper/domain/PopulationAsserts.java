package com.kpis.helper.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PopulationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPopulationAllPropertiesEquals(Population expected, Population actual) {
        assertPopulationAutoGeneratedPropertiesEquals(expected, actual);
        assertPopulationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPopulationAllUpdatablePropertiesEquals(Population expected, Population actual) {
        assertPopulationUpdatableFieldsEquals(expected, actual);
        assertPopulationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPopulationAutoGeneratedPropertiesEquals(Population expected, Population actual) {
        assertThat(expected)
            .as("Verify Population auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPopulationUpdatableFieldsEquals(Population expected, Population actual) {
        assertThat(expected)
            .as("Verify Population relevant properties")
            .satisfies(e -> assertThat(e.getDate_recorded()).as("check date_recorded").isEqualTo(actual.getDate_recorded()))
            .satisfies(e -> assertThat(e.getPopulation()).as("check population").isEqualTo(actual.getPopulation()))
            .satisfies(e -> assertThat(e.getActive_members()).as("check active_members").isEqualTo(actual.getActive_members()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPopulationUpdatableRelationshipsEquals(Population expected, Population actual) {
        assertThat(expected)
            .as("Verify Population relationships")
            .satisfies(e -> assertThat(e.getLibrary()).as("check library").isEqualTo(actual.getLibrary()));
    }
}
