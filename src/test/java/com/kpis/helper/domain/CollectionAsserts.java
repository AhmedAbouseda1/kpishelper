package com.kpis.helper.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CollectionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionAllPropertiesEquals(Collection expected, Collection actual) {
        assertCollectionAutoGeneratedPropertiesEquals(expected, actual);
        assertCollectionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionAllUpdatablePropertiesEquals(Collection expected, Collection actual) {
        assertCollectionUpdatableFieldsEquals(expected, actual);
        assertCollectionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionAutoGeneratedPropertiesEquals(Collection expected, Collection actual) {
        assertThat(expected)
            .as("Verify Collection auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionUpdatableFieldsEquals(Collection expected, Collection actual) {
        assertThat(expected)
            .as("Verify Collection relevant properties")
            .satisfies(e -> assertThat(e.getDate_recorded()).as("check date_recorded").isEqualTo(actual.getDate_recorded()))
            .satisfies(e -> assertThat(e.getCollection_size()).as("check collection_size").isEqualTo(actual.getCollection_size()))
            .satisfies(e -> assertThat(e.getNumber_of_titles()).as("check number_of_titles").isEqualTo(actual.getNumber_of_titles()))
            .satisfies(
                e ->
                    assertThat(e.getStock_for_public_usage())
                        .as("check stock_for_public_usage")
                        .isEqualTo(actual.getStock_for_public_usage())
            )
            .satisfies(
                e ->
                    assertThat(e.getTitles_availability_for_population())
                        .as("check titles_availability_for_population")
                        .isEqualTo(actual.getTitles_availability_for_population())
            )
            .satisfies(
                e ->
                    assertThat(e.getTitles_availability_for_active_members())
                        .as("check titles_availability_for_active_members")
                        .isEqualTo(actual.getTitles_availability_for_active_members())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollectionUpdatableRelationshipsEquals(Collection expected, Collection actual) {
        assertThat(expected)
            .as("Verify Collection relationships")
            .satisfies(e -> assertThat(e.getLibrary()).as("check library").isEqualTo(actual.getLibrary()));
    }
}
