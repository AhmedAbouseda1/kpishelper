package com.kpis.helper.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ElectronicServicesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertElectronicServicesAllPropertiesEquals(ElectronicServices expected, ElectronicServices actual) {
        assertElectronicServicesAutoGeneratedPropertiesEquals(expected, actual);
        assertElectronicServicesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertElectronicServicesAllUpdatablePropertiesEquals(ElectronicServices expected, ElectronicServices actual) {
        assertElectronicServicesUpdatableFieldsEquals(expected, actual);
        assertElectronicServicesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertElectronicServicesAutoGeneratedPropertiesEquals(ElectronicServices expected, ElectronicServices actual) {
        assertThat(expected)
            .as("Verify ElectronicServices auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertElectronicServicesUpdatableFieldsEquals(ElectronicServices expected, ElectronicServices actual) {
        assertThat(expected)
            .as("Verify ElectronicServices relevant properties")
            .satisfies(e -> assertThat(e.getRecorded_date()).as("check recorded_date").isEqualTo(actual.getRecorded_date()))
            .satisfies(
                e ->
                    assertThat(e.getTotal_pcs_with_internet())
                        .as("check total_pcs_with_internet")
                        .isEqualTo(actual.getTotal_pcs_with_internet())
            )
            .satisfies(
                e ->
                    assertThat(e.getPcs_with_internet_for_clients_only())
                        .as("check pcs_with_internet_for_clients_only")
                        .isEqualTo(actual.getPcs_with_internet_for_clients_only())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertElectronicServicesUpdatableRelationshipsEquals(ElectronicServices expected, ElectronicServices actual) {}
}
